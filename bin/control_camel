#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

CAMELVERTX_BIN_DIR=${OPENSHIFT_CAMELVERTX_DIR}/bin
CAMELVERTX_PID_FILE=${OPENSHIFT_HOMEDIR}/app-root/runtime/camelvertx.pid

cartridge_type="camelvertx"

# Checks for the presence of the user-specified hot_deploy marker in the app
# repo. Returns 0 if the marker is present, otherwise 1.
function hot_deploy_marker_is_present {
  if [ -f "${OPENSHIFT_REPO_DIR}/camel/.openshift/markers/hot_deploy" ]; then
    return 0
  else
    return 1
  fi
}

# Check if the jbossas process is running
function isrunning() {
    
    # Check for running app
    if [ -f "$CAMELVERTX_PID_FILE" ]; then
      jbpid=$(cat $CAMELVERTX_PID_FILE);
      if /bin/ps --pid $jbpid 1>&2 >/dev/null;
      then
        return 0
      fi
    fi
   
    return 0
}

# Kill the process given by $1 and its children
killtree() {
    local _pid=$1
    for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
        killtree ${_child}
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z $should_be_gone_pid ]; then
        return
    else
        kill -TERM ${_pid}
    fi

    local count=0
    while [ ${count} -lt 15 ]
    do
        local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
        if [ -z $should_be_gone_pid ]; then
                return
        else
                sleep 2
                let count=${count}+1
        fi
    done

    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ ! -z $should_be_gone_pid ]
    then
        kill -9 ${_pid}
    fi
}

# Check if the server http port is up
function ishttpup() {

    let count=0
    while [ ${count} -lt 24 ]
    do
        if /usr/sbin/lsof -P -n -i "@${OPENSHIFT_CAMELVERTX_IP}:18001" | grep "(LISTEN)" > /dev/null; then
            echo "Found ${OPENSHIFT_CAMELVERTX_IP}:18001 listening port"
            return 0
        fi
        let count=${count}+1

        sleep 2
    done

    return 1
}

function build() {
    	
    	LOG_DIR=$(echo "$OPENSHIFT_CAMELVERTX_LOG_DIR" | sed -e "s@\/@\\\\/@g")
    	
    	#OPENSHIFT_CAMELVERTX_PROXY_IP=$(nslookup ${OPENSHIFT_GEAR_DNS} | awk '/^Address: / { print $2 ; exit }')
    	OPENSHIFT_CAMELVERTX_PROXY_IP=$(ping -c 1 ${OPENSHIFT_GEAR_DNS} | awk '{ print $3 ; exit }' | sed 's/(//g' | sed 's/)//g')
    	
    	hostnames=
    	for address in $OPENSHIFT_CAMELVERTX_CLUSTER; do
        	hostnames="<hostname>$address<\/hostname>${hostnames}"
		done
		
		mkdir -p ${OPENSHIFT_HOMEDIR}/.m2/repository/com/hazelcast/hazelcast/2.4.1/
		mkdir -p ${OPENSHIFT_HOMEDIR}/.m2/repository/org/vert-x/vertx-platform/1.3.1.final/
		mkdir -p ${OPENSHIFT_HOMEDIR}/.m2/repository/org/vert-x/vertx-core/1.3.1.final/
		cp ${OPENSHIFT_REPO_DIR}/camel/lib/hazelcast-2.4.1.jar ${OPENSHIFT_HOMEDIR}/.m2/repository/com/hazelcast/hazelcast/2.4.1/
		cp ${OPENSHIFT_REPO_DIR}/camel/lib/vertx-platform-1.3.1.final.jar ${OPENSHIFT_HOMEDIR}/.m2/repository/org/vert-x/vertx-platform/1.3.1.final/
		cp ${OPENSHIFT_REPO_DIR}/camel/lib/vertx-core-1.3.1.final.jar ${OPENSHIFT_HOMEDIR}/.m2/repository/org/vert-x/vertx-core/1.3.1.final/
		
		pushd ${OPENSHIFT_REPO_DIR}/camel > /dev/null
		
		    mkdir -p tmp/deployments
		    cp -rf src tmp
		    cp pom.xml tmp
		    cd tmp
    	
			sed -i -e "s/\${env.OPENSHIFT_CAMELVERTX_CLUSTER_PROXY_PORT}/${OPENSHIFT_CAMELVERTX_CLUSTER_PROXY_PORT}/g" \
					-e "s/\${env.OPENSHIFT_CAMELVERTX_PROXY_IP}/${OPENSHIFT_CAMELVERTX_PROXY_IP}/g" \
					-e "s/\${env.OPENSHIFT_CAMELVERTX_CLUSTER}/${hostnames}/g" \
					./src/main/resources/cluster.xml
		    sed -i -e "s/\${env.OPENSHIFT_CAMELVERTX_IP}/${OPENSHIFT_CAMELVERTX_IP}/g" \
		    	-e "s/\${env.BROKER_HOST}/bam.keynote.projectodd.org/g" \
		    	-e "s/\${env.OPENSHIFT_GEAR_DNS}/${OPENSHIFT_GEAR_DNS}/g" \
		    	-e "s/\${env.OPENSHIFT_CAMELVERTX_VERTX_PROXY_PORT}/${OPENSHIFT_CAMELVERTX_VERTX_PROXY_PORT}/g" \
		    	./src/main/webapp/WEB-INF/applicationContext.xml
		    	
			sed -i -e "s/\${env.OPENSHIFT_CAMELVERTX_LOG_DIR}/${LOG_DIR}/g" ./src/main/resources/log4j.properties
	    	
			mvn clean package -Popenshift -DskipTests
			
			cp deployments/ROOT.war ../deployments
			cd ..
			rm -rf tmp
   
    	popd > /dev/null

}

function deploy() {
	echo "Deploying JBoss"
	
	if [ "$(ls ${OPENSHIFT_REPO_DIR}/camel/deployments)" ]; then
		rsync -r --delete --exclude ".*" ${OPENSHIFT_REPO_DIR}/camel/deployments/ ${OPENSHIFT_CAMELVERTX_DIR}/standalone/deployments/
	else
    rm -rf ${OPENSHIFT_CAMELVERTX_DIR}/standalone/deployments/*
  fi
}

function start() {
    echo "Starting $cartridge_type cart"
    
    build
    deploy
    
	if [ -f "${OPENSHIFT_REPO_DIR}/camel/.openshift/markers/enable_jpda" ]; then
    	ENABLE_JPDA=1
    fi

  # Check for running app
  if isrunning; then
    echo "Application is already running"
  else
    jopts="${JAVA_OPTS}"
    [ "${ENABLE_JPDA:-0}" -eq 1 ] && jopts="-Xdebug -Xrunjdwp:transport=dt_socket,address=${OPENSHIFT_CAMELVERTX_IP}:8787,server=y,suspend=n ${JAVA_OPTS}"
    JAVA_OPTS="${jopts}"
    ${CAMELVERTX_BIN_DIR}/standalone.sh > ${OPENSHIFT_TMP_DIR}/${cartridge_type}.log 2>&1 &
    PROCESS_ID=$!
    echo "$PROCESS_ID" > ${CAMELVERTX_PID_FILE}
    if ! ishttpup; then
      echo "Timed out waiting for http listening port"
      exit 1
    fi
  fi
}


function stop() {
  echo "Stopping $cartridge_type cart"
  
  if isrunning; then
		if [ -f "$CAMELVERTX_PID_FILE" ]; then
      pid=$(cat $CAMELVERTX_PID_FILE);
      echo "Sending SIGTERM to jboss:$pid ..." 1>&2
      killtree $pid
    else 
	    echo "Failed to locate JBOSS PID File" 1>&2
	  fi
  fi
}

function restart() {
    echo "Restarting $cartridge_type cart"
   
  	stop
  	
  	start
}

function status() {
   if isrunning
   then
      echo "Application is running"
   else
      echo "Application is either stopped or inaccessible"
   fi
}

function reload() {
    echo "Reloading $cartridge_type cart"
    restart
}

function tidy() {
    rm -rf ${OPENSHIFT_CAMELVERTX_DIR}/logs/* ${OPENSHIFT_CAMELVERTX_DIR}/logs/.[^.]*
}

function threaddump() {
	echo "Thread dump for $cartridge_type cart"
	
    if ! isrunning; then
        echo "Application is stopped"
        exit 1
    elif [ -f "$CAMELVERTX_PID_FILE" ]; then
        pid=$(cat $CAMELVERTX_PID_FILE);
        java_pid=`ps h --ppid $pid -o '%p'`
        kill -3 $java_pid
        
        client_result "Success"
        client_result ""
        client_result "The thread dump file will be available via: rhc tail $OPENSHIFT_APP_NAME -f */logs/server.log -o '-n 250'"
    else 
        echo "Failed to locate JBOSS PID File"
    fi
}

case "$1" in
  deploy)	    deploy ;;
  start)     	start ;;
  stop)      	stop ;;
  restart)   	restart ;;
  status)    	status ;;
  reload)    	reload ;;
  tidy)      	tidy ;;
  threaddump)   threaddump ;;
  *)         	exit 0
esac


